@model IEnumerable<Chapter9.Models.State>
@using Chapter9.Models

<svg xmlns:svg="http://www.w3.org/2000/svg" version="1.2"
     width="959" height="593" id="map" onload="adjustStates()" >

    <script type="text/javascript">
    function adjustStates() {
        var paths = document.getElementsByTagName("path");
        for (var i = 0; i < paths.length; i++) {
            paths[i].setAttributeNS(null, "fill", "khaki");
            paths[i].addEventListener("mouseover", hoverState, true);
            paths[i].addEventListener("mouseout", unhoverState, true);
            paths[i].addEventListener("click", selectState, true);
        }

        var path = document.getElementById("VA");
        path.setAttributeNS(null, "fill", "teal");
    }

    function hoverState(e) {
        var event = e || window.event;
        var state = event.target.getAttributeNS(null, "id");
        var path = document.getElementById(state);
        path.setAttributeNS(null, "fill-opacity", "0.5");
    }

    function unhoverState(e) {
        var event = e || window.event;
        var state = event.target.getAttributeNS(null, "id");
        var path = document.getElementById(state);
        path.setAttributeNS(null, "fill-opacity", "1.0");
    }

    // Setup some global variables
    var timer;
    var stateCode;
    var stateName;
    var animate;
    var angle;

    function selectState(e) {
        var event = e || window.event;

        // Get the state code and state name
        stateCode = event.target.getAttributeNS(null, "id");
        stateName = event.target.getAttributeNS(null, "class");

        // Get the selected path element and then make a copy of it
        var path = document.getElementById(stateCode);
        animate = path.cloneNode(false);

        // Set some display properties and add the copy to the document
        animate.setAttributeNS(null, "fill-opacity", "1.0");
        animate.setAttributeNS(null, "stroke-width", "3");
        document.getElementById("map").appendChild(animate);

        angle = 0;

        // Setup a timer to run every 10 msec
        timer = setInterval(function () { animateState(); }, 10);
    }

    function animateState() {
        angle += 1;

        // If we’ve rotated 360 degress, stop the timer, destroy the copy
        // of the element, and show an alert
        if (angle > 360) {
            clearInterval(timer);
            animate.setAttributeNS(null, "visibility", "hidden");
            var old = document.getElementById("map").removeChild(animate);

            alert(stateCode + " - " + stateName);

            return;
        }

        // Change the image rotation
        animate.style.webkitTransform = "rotateY(" + Math.round(angle) + "deg)";
    }
    </script>

    <defs>
        <linearGradient id="blueGradient"
                        x1="0%" y1="0%"
                        x2="100%" y2="100%"
                        spreadMethod="pad">
            <stop offset="0%" stop-color="#ffffff" stop-opacity="1" />
            <stop offset="50%" stop-color="#6699cc" stop-opacity="1" />
            <stop offset="100%" stop-color="#4466aa" stop-opacity="1" />
        </linearGradient>
        <pattern id="TXflag" patternUnits="objectBoundingBox" width="1" height="1">
            <image xlink:href="~/images /TX_Flag.jpg" x="0" y="0"
                   width="377" height="226" />
        </pattern>
    </defs>
    <style type="text/css" >
        path 
        {
        stroke: black;
        /*fill: khaki;*/
        }

        path[id^="A"] 
        {
            fill: red;
        }
        path[id^="N"] 
        {
            fill: yellow;
        }
        path[id^="M"] 
        {
            fill: green;
        }
        path[id^="C"] 
        {
        fill: blue;
        }
        path[id^="O"] 
        {
            fill: purple;
        }
        path[id^="I"] 
        {
        fill: orange;
        }
        /*path:hover 
        {
            opacity: .5;
        }*/
        path[id="WY"] 
        {
            fill: url(#blueGradient);
        }
        path[id="TX"] 
        {
            fill: url(#TXflag);      
        }
        path
        {
            -webkit-perspective: 200px;
            -webkit-transform-style: preserve-3d;
        }
    </style>

    @foreach (State s in Model)
    {
        <path id="@s.StateCode.Trim()" class="@s.StateName.Trim()" d="@s.Path" />
    }
</svg>
